---
name: Modules.Geofence
summary: Provides a battery-efficient way to monitor a device's movement into or out of a geographic region.
extends: Titanium.Module
description: |    

    **Note**: The Geofence module is available to Appcelerator Platform customers, only. 

    You use the Geofence module to define and monitor geofences in your application. A geofence is a circular
    region defined by a point (a latitude/longitude pair) and a radius, and represented by the
    [Region](Modules.Geofence.Region) object. When a device moves into
    or out of a geofence being monitored, the module notifies your application of the event.

    Enterprise customers can also define geofences on the server using the 
    <a href="/cloud/latest/#!/api/GeoFences-method-create">Appcelerator Cloud Services API</a>. 
    An application can query the server for any defined geofences and begin monitoring them. 
    See the RegionMonitoring example in the module ZIP download.

    ## Getting Started

    Once you've [installed](#!/guide/Using_a_Module) the module, use `require() to access it from JavaScript:

        var Geofence = require("ti.geofence");

    ### Creating and monitoring geofence regions

    You use the [Geofence.createRegion()](Modules.Geofence.createRegion) method to define a [Region](Modules.Geofence.Region) object.
    A geofence is a circular area defined by a point (latitude and longitude) and a radius (in meters).

        var newRegion = Geofence.createRegion({
            center: {
                latitude:37.389601,
                longitude:-122.050169
            },
            radius:500,
            identifier:'Appcelerator'
        });

    To start monitoring a region, call the [Geofence.startMonitoringForRegions()](Modules.Geofence.startMonitoringForRegions) method, passing it the
    region or regions you want to monitor.

        Geofence.startMonitoringForRegions([region1, region2]);

    To be notified when the device moves into or out of a geofence region, create an event listener
    for the [enterregions](Modules.Geofence.enterregions) or [exitregions](Modules.Geofence.exitregions) events, respectively.
    For example:

        Geofence.addEventListener("enterregion", function(e) {
            // Display local notification
            for (var i = 0, j = e.regions.length; i < j; i++) {
                showNotification({
                    title: 'ENTER',
                    body: 'enter - ' + e.regions[i].identifier
                });
            }
        })

    The event object passed to the event handler contains a `regions` property that identifies the region(s)
    that were entered or exited. On iOS this property contains an array of [Region](Modules.Geofence.Region) objects;
    on Android, it contains an array of generic objects that each contain a property called
    `identifier`. The value of this property corresponds to the one assigned to the [Region](Modules.Geofence.Region)
    when it was created.

    ## Testing Geofence monitoring

    You have a few options for testing geofence monitoring in your application. One approach
    is field testing: travel (drive, walk, etc.) between monitored regions while the application is running.
    You can also pass mock location data to the application running on a device or simulator.

    Note: The timing and frequency of location events may vary from one environment to another (device, OS version, network availability).

    ### Mock locations from the iOS Simulator

    Once the application is running in the simulator, select **Debug** > **Location** in the simulator and
    select a predefined location or route that you would like to be sent to the simulator. You can
    also enter a custom location (latitude, longitude).

    ### Mock locations using Xcode

    This method will work on both the iOS Simulator and on device.

    1. Launch your application once, then go to the build folder of your project and open the Xcode project found in **build/iphone/**.
    2. Run your project using Xcode.
    3. Once app is running, in Xcode debug area, click the Simulate Location icon to display a list of mock locations that can be sent to your application.
    5. Select one of these locations to send it to your app.
        Alternately, click on **Add GPX File to Project...** and select a GPX file with mock locations. A GPX file is provided in the **example/MockLocationData** folder in module download. The route starts at North De Anza Blvd and I-280 in Cupertino, CA and travels north on I-280.
    8. After adding a GPX file, go back and click on the mock locations arrow. The GPX file should now be in the list. Select the mock location to start using it.

    ### Mock locations on Android

    Add the following to your `tiapp.xml`.

        <uses-permission android:name="android.permission.ACCESS_MOCK_LOCATION" />

    For more information, see [Testing Using Mock Locations](http://developer.android.com/training/location/location-testing.html) and
    download the [LocationProvider](http://developer.android.com/shareables/training/LocationProvider.zip) application
    to send mock locations to your application.

    ### Sample applications

    The module ZIP file contains two Geofence sample applications (**examples/Basic** and **examples/RegionMonitoring**) 
    and a GPX file (**examples/MockLocationData**) for mocking location data in Xcode.


since: "3.1.3"
platforms: [android, iphone, ipad]

methods:

  - name: regionMonitoringAvailable
    summary: Returns a boolean that indicates if region monitoring is supported on the current device.
    description: |

        Example:

            var canMonitor = Geofence.regionMonitoringAvailable();

    platforms: [iphone, ipad]
    returns:
        type: Boolean

  - name: isGooglePlayServicesAvailable
    summary: Returns a number value indicating the availability of Google Play Services which are required to monitor regions.
    description: |
        Possible values include [SUCCESS](Modules.Geofence.SUCCESS), [SERVICE_MISSING](Modules.Geofence.SERVICE_MISSING), [SERVICE_VERSION_UPDATE_REQUIRED](Modules.Geofence.SERVICE_VERSION_UPDATE_REQUIRED), [SERVICE_DISABLED](Modules.Geofence.SERVICE_DISABLED), and [SERVICE_INVALID](Modules.Geofence.SERVICE_INVALID).
        Example:

            var hasGooglePlayServices = Geofence.isGooglePlayServicesAvailable();

    platforms: [android]
    returns:
        type: Boolean

  - name: createRegion
    summary: Creates a geofence [Region](Modules.Geofence.Region).
    description: |
        Example:

            var region = Geofence.createRegion({
                center: {
                    latitude:37.38960100,
                    longitude:-122.05016900
                },
                radius:30,
                identifier:'Appcelerator'
            });
    returns:
        type: Modules.Geofence.Region    
    parameters:
        - name: object
          summary: Object with properties of the [Region](Modules.Geofence.Region) object.
          type: Dictionary<Modules.Geofence.Region>

  - name: startMonitoringForRegions
    summary: Starts monitoring the [Region(s)](Modules.Geofence.Region) passed as a parameter.
    description: |
        Takes either an array of [Region](Modules.Geofence.Region) objects or a single
        [Region](Modules.Geofence.Region) object as an argument.

        On Android, if the device is located in a [Region](Modules.Geofence.Region) that has just
        started being monitored, an [enterregions](Modules.Geofence.enterregions)
        event is generated. On iOS, this scenario will not generate an `enterregions` event;
        instead, call the [containsCoordinate()](Modules.Geofence.Region.containsCoordinate) method 
        on the newly `Region` object to check if the device is located within it.

        Each platform limits the number of regions that can be monitored at one time. On iOS this limit is 20 regions, 
        and 100 regions on Android. The following example creates a new Region object and then starts monitoring it.
            
            var region1 = Geofence.createRegion({
                center: {
                    latitude:37.389601,
                    longitude:-122.050169
                },
                radius:500,
                identifier:'Appcelerator'
            });
            Geofence.startMonitoringForRegions(region1);

    parameters:
      - name: Region
        summary: Either an array of [Region](Modules.Geofence.Region) objects or a single [Region](Modules.Geofence.Region) object.
        type: [Array<Modules.Geofence.Region>, Modules.Geofence.Region]

  - name: stopMonitoringForRegions
    summary: Stops monitoring the specified region or regions.
    description: |
        Takes either an array of [Region](Modules.Geofence.Region) objects or a single
        [Region](Modules.Geofence.Region) object as an argument.

        This method is asynchronous on Android. The `removeregions` event will fire on completion.

            Geofence.stopMonitoringForRegions([region, region1]);

    parameters:
      - name: Region
        summary: Either an array of [Region](Modules.Geofence.Region) objects or a single [Region](Modules.Geofence.Region) object.
        type: [Array<Modules.Geofence.Region>, Modules.Geofence.Region]


  - name: stopMonitoringAllRegions
    summary: Stops monitoring all of the regions that are currently being monitored.
    description: |
        This method is asynchronous on Android. The `removeregions` event will fire on completion.

        Example:

            Geofence.stopMonitoringAllRegions();

properties:

  - name: monitoredRegions
    summary: An array of the regions currently being monitored for the current application.
    description: |
        Example:

            var regions = Geofence.monitoredRegions;

    permission: read-only
    type: [Array<Dictionary>, Array<Modules.Geofence.Region>]
    platforms: [iphone, ipad]

  - name: SUCCESS
    summary: Returned by [isGooglePlayServicesAvailable](Modules.Geofence.isGooglePlayServicesAvailable) if the connection to Google Play services was successful.
    type: Number
    permission: read-only
    platforms: [android]

  - name: SERVICE_MISSING
    summary: Returned by [isGooglePlayServicesAvailable](Modules.Geofence.isGooglePlayServicesAvailable) if Google Play services is missing on this device.
    type: Number
    permission: read-only
    platforms: [android]

  - name: SERVICE_VERSION_UPDATE_REQUIRED
    summary: Returned by [isGooglePlayServicesAvailable](Modules.Geofence.isGooglePlayServicesAvailable) if the installed version of Google Play services is out of date.
    type: Number
    permission: read-only
    platforms: [android]

  - name: SERVICE_DISABLED
    summary: Returned by [isGooglePlayServicesAvailable](Modules.Geofence.isGooglePlayServicesAvailable) if the installed version of Google Play services has been disabled on this device.
    type: Number
    permission: read-only
    platforms: [android]

  - name: SERVICE_INVALID
    summary: Returned by [isGooglePlayServicesAvailable](Modules.Geofence.isGooglePlayServicesAvailable) if the version of the Google Play services installed on this device is not authentic.
    type: Number
    permission: read-only
    platforms: [android]

  - name: LOCATION_STATUS_ERROR
    summary: Possible value of the `errorcode` property in the [error](Modules.Geofence.error) event object indicating an unspecified error occurred.
    type: Number
    permission: read-only
    platforms: [android]

  - name: LOCATION_STATUS_GEOFENCE_NOT_AVAILABLE
    summary: Possible value of the `errorcode` property in the [error](Modules.Geofence.error) event object indicating the geofence service is not available now.
    type: Number
    permission: read-only
    platforms: [android]

  - name: LOCATION_STATUS_GEOFENCE_TOO_MANY_GEOFENCES
    summary: Possible value of the `errorcode` property in the [error](Modules.Geofence.error) event object indicating your application has registered more than 100 geofences.
    type: Number
    permission: read-only
    platforms: [android]

  - name: LOCATION_STATUS_GEOFENCE_TOO_MANY_PENDING_INTENTS
    summary: Possible value of the `errorcode` property in the [error](Modules.Geofence.error) event object.
    type: Number
    permission: read-only
    platforms: [android]

events:

  - name: error
    summary: Fired when there is an error, or monitoring failed for a region.
    properties:
      - name: error
        summary: A string that describes the error.
        type: String
      - name: errorcode
        summary:
            "A number that describes the error (Android, only). Can be one of the following: [LOCATION_STATUS_ERROR](Modules.Geofence.LOCATION_STATUS_ERROR), [LOCATION_STATUS_GEOFENCE_NOT_AVAILABLE](Modules.Geofence.LOCATION_STATUS_GEOFENCE_NOT_AVAILABLE), [LOCATION_STATUS_GEOFENCE_TOO_MANY_GEOFENCES](Modules.Geofence.LOCATION_STATUS_GEOFENCE_TOO_MANY_GEOFENCES), [LOCATION_STATUS_GEOFENCE_TOO_MANY_PENDING_INTENTS](Modules.Geofence.LOCATION_STATUS_GEOFENCE_TOO_MANY_PENDING_INTENTS)"
        type: Number
      - name: regions
        summary: The regions for which monitoring failed. On iOS, this property contains an array of [Region](Modules.Geofence.Region) objects representing the regions for which monitoring failed. On Android, this property contains an array of generic objects, each of which has an
            [identifier](Modules.Geofence.Region.identifier) property that corresponds to the region(s) that were entered.
        type: [Array<Dictionary>, Array<Modules.Geofence.Region>]

  - name: enterregions
    summary: Fired when the device enters a monitored region.
    properties:
      - name: regions
        summary: The region(s) that were entered. On iOS, this property contains an array of [Region](Modules.Geofence.Region) objects representing the regions that were entered.
            On Android, this property contains an array of generic objects, each of which has an
            [identifier](Modules.Geofence.Region.identifier) property that corresponds to the region(s) that were entered.
        type: [Array<Dictionary>, Array<Modules.Geofence.Region>]

  - name: exitregions
    summary: Fired when the device exits a monitored region.
    properties:
      - name: regions
        summary: The region(s) that were exited. On iOS, this property contains an array of [Region](Modules.Geofence.Region) objects representing the regions that were exited.
            On Android, this property contains an array of generic objects, each of which has an
            [identifier](Modules.Geofence.Region.identifier) property that corresponds to the region(s) that were exited.
        type: [Array<Dictionary>, Array<Modules.Geofence.Region>]

  - name: monitorregions
    summary: Fired when [startMonitoringForRegions()](Module.Geofence.startMonitoringForRegions) and monitoring has successfully started for those regions.
    properties:
      - name: regions
        summary: The region(s) for which monitoring has started. On iOS, this property contains an array of [Region](Modules.Geofence.Region) objects representing the regions for which monitoring has started.
            On Android, this property contains an array of generic objects, each of which has an
            [identifier](Modules.Geofence.Region.identifier) property that corresponds to the region(s) for which monitoring has started.
        type: [Array<Dictionary>, Array<Modules.Geofence.Region>]

  - name: removeregions
    summary: Fired on Android when regions are removed using `stopMonitoringForRegions` or `stopMonitoringAllRegions` and monitoring has successfully stopped for those regions.
    properties:
      - name: regions
        summary: The region(s) for which monitoring has stopped. On iOS, this property contains an array of [Region](Modules.Geofence.Region) objects representing the regions for which monitoring has stopped.
            On Android, this property contains an array of generic objects, each of which has an
            [identifier](Modules.Geofence.Region.identifier) property that corresponds to the region(s) for which monitoring has stopped.
        type: [Array<Dictionary>, Array<Modules.Geofence.Region>]
    platforms: [android]
